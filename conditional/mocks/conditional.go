// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces/conditional.go
//
// Generated by this command:
//
//	mockgen -source=./interfaces/conditional.go -destination=./mocks/conditional.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIConditional is a mock of IConditional interface.
type MockIConditional[A any] struct {
	ctrl     *gomock.Controller
	recorder *MockIConditionalMockRecorder[A]
}

// MockIConditionalMockRecorder is the mock recorder for MockIConditional.
type MockIConditionalMockRecorder[A any] struct {
	mock *MockIConditional[A]
}

// NewMockIConditional creates a new mock instance.
func NewMockIConditional[A any](ctrl *gomock.Controller) *MockIConditional[A] {
	mock := &MockIConditional[A]{ctrl: ctrl}
	mock.recorder = &MockIConditionalMockRecorder[A]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConditional[A]) EXPECT() *MockIConditionalMockRecorder[A] {
	return m.recorder
}

// If mocks base method.
func (m *MockIConditional[A]) If(condition bool, trueRes, falseRes A) A {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "If", condition, trueRes, falseRes)
	ret0, _ := ret[0].(A)
	return ret0
}

// If indicates an expected call of If.
func (mr *MockIConditionalMockRecorder[A]) If(condition, trueRes, falseRes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "If", reflect.TypeOf((*MockIConditional[A])(nil).If), condition, trueRes, falseRes)
}
