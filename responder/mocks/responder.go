// Code generated by MockGen. DO NOT EDIT.
// Source: ./responder.go
//
// Generated by this command:
//
//	mockgen -source=./responder.go -destination=./mocks/responder.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIJSONResponder is a mock of IJSONResponder interface.
type MockIJSONResponder struct {
	ctrl     *gomock.Controller
	recorder *MockIJSONResponderMockRecorder
}

// MockIJSONResponderMockRecorder is the mock recorder for MockIJSONResponder.
type MockIJSONResponderMockRecorder struct {
	mock *MockIJSONResponder
}

// NewMockIJSONResponder creates a new mock instance.
func NewMockIJSONResponder(ctrl *gomock.Controller) *MockIJSONResponder {
	mock := &MockIJSONResponder{ctrl: ctrl}
	mock.recorder = &MockIJSONResponderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIJSONResponder) EXPECT() *MockIJSONResponderMockRecorder {
	return m.recorder
}

// JSON mocks base method.
func (m *MockIJSONResponder) JSON(code int, data any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "JSON", code, data)
}

// JSON indicates an expected call of JSON.
func (mr *MockIJSONResponderMockRecorder) JSON(code, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSON", reflect.TypeOf((*MockIJSONResponder)(nil).JSON), code, data)
}
