// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces/log.go
//
// Generated by this command:
//
//	mockgen -source=./interfaces/log.go -destination=./mocks/log.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	zap "logur.dev/adapter/zap"
)

// MockILog is a mock of ILog interface.
type MockILog[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockILogMockRecorder[T]
}

// MockILogMockRecorder is the mock recorder for MockILog.
type MockILogMockRecorder[T any] struct {
	mock *MockILog[T]
}

// NewMockILog creates a new mock instance.
func NewMockILog[T any](ctrl *gomock.Controller) *MockILog[T] {
	mock := &MockILog[T]{ctrl: ctrl}
	mock.recorder = &MockILogMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILog[T]) EXPECT() *MockILogMockRecorder[T] {
	return m.recorder
}

// Initialize mocks base method.
func (m *MockILog[T]) Initialize() *zap.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize")
	ret0, _ := ret[0].(*zap.Logger)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockILogMockRecorder[T]) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockILog[T])(nil).Initialize))
}
